name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main
  schedule:
    - cron: '0 * * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.120.2
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb   

      - name: Install Dart Sass
        run: sudo snap install dart-sass

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
          submodules: recursive
          fetch-depth: 0
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
            python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      - name: Get Organization Repository Names
        uses : austenstone/get-org-repos@v3.1
        with:
          github-token: ${{ secrets.PERSONAL_TOKEN }}
          org: "HITSZ-OpenAuto"
          delimiter: "\n"
        id: get-org-repos

      - name: Turn to Array
        id: modified_files_list
        uses: lucaspinheirogit/list-from-string-array-action@v1.4.3
        with:
          stringArray: ${{ steps.get-org-repos.outputs.repos }}

      - name: Bulid Semester Pages
        run: |
          semester_arr=('fresh-autumn' 'fresh-spring' 'fresh-summer' 'sophomore-autumn' 'sophomore-spring' 'sophomore-summer' 'junior-autumn' 'junior-spring' 'junior-summer' 'senior-autumn' 'senior-spring')
          semester_name=('大一·秋' '大一·春' '大一·夏' '大二·秋' '大二·春' '大二·夏' '大三·秋' '大三·春' '大三·夏' '大四·秋' '大四·春')
          category_arr='mandatory distributional-selective cross-major-selective'
          for((i=0;i<${#semester_arr[@]};i++))
          do
            SEMESTER="${semester_arr[i]}"
            OUT="${semester_name[i]}"
            echo "Creating a folder for a new semester"
            mkdir -p "./content/docs/${SEMESTER}"
            echo "./content/docs/${SEMESTER}"
            echo '---' > "./content/docs/${SEMESTER}/_index.zh-cn.md"
            echo "title: ${OUT}" >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
            echo "weight: $((${i}+2))" >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
            echo 'comments: false' >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
            echo 'toc: false' >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
            echo '---' >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
            echo "探索以下各节以查找相关资料" >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
            for CATEGORY in $category_arr
            do
              touch "${SEMESTER}-${CATEGORY}.txt"
            done
          done
          
          echo "${{ steps.modified_files_list.outputs.stringList }}" > tmp.txt
          cat tmp.txt | grep -E "^-.([A-Z]){2,4}([0-9]){4}.*$" | sed -E 's/^..(.*)$/\1/' > repos.txt
          cat repos.txt

      - name: Build Courses Pages
        run: |
          counter_man=0
          counter_dis=100
          counter_cross=200
          for line in $(cat repos.txt)
          do
            echo '-------------------------------------------------'
            echo ${line}
            curl "https://raw.githubusercontent.com/HITSZ-OpenAuto/${line}/main/tag.txt" -o "tag_${line}.txt"
            
            echo '-----tag.txt-----'
            cat "tag_${line}.txt"
            echo " "
            echo '-----------------'

            OUT=`cat "tag_${line}.txt" | grep -E "^semester:..*$" | sed -E 's/^semester:.(.*)$/\1/'`
            echo ${OUT}

            case ${OUT} in
              '第一学年秋季')
                semester='fresh-autumn'
                ;;
              '第一学年春季')
                semester='fresh-spring'
                ;;
              '第一学年夏季')
                semester='fresh-summer'
                ;;
              '第二学年秋季')
                semester='sophomore-autumn'
                ;;
              '第二学年春季')
                semester='sophomore-spring'
                ;;
              '第二学年夏季')
                semester='sophomore-summer'
                ;;
              '第三学年秋季')
                semester='junior-autumn'
                ;;
              '第三学年春季')
                semester='junior-spring'
                ;;
              '第三学年夏季')
                semester='junior-summer'
                ;;
              '第四学年秋季')
                semester='senior-autumn'
                ;;
              '第四学年春季')
                semester='senior-spring'
                ;;
              *)
                echo "No match semester"
                continue
                ;;   
            esac
     
            echo $semester

            CATEGORY=`cat "tag_${line}.txt" | grep -E "^category:..*$" | sed -E 's/^category:.(.*)$/\1/'`

            case ${CATEGORY} in
            '必修')
                category='mandatory'
                ;;
              '限选')
                category='distributional-selective'
                ;;
              '跨专业选修')
                category='cross-major-selective'
                ;;
              *)
                echo "No match category"
                continue
                ;;   
            esac

            echo $category

            cat "tag_${line}.txt" | grep -E "^name:..*$" | sed -E 's/^name:.(.*)$/\1/' > "name_${line}.txt"

            if test ! -s "${semester}-${category}.txt"
            then
              echo "## ${CATEGORY}" > "${semester}-${category}.txt"
              if [ ${CATEGORY} = "限选" ]
              then
                echo "[点击查看限选课选课指南](https://hoa.moe/blog/selecting-distributive-lessons/)" >> "${semester}-${category}.txt"
              fi
              if [ ${CATEGORY} = "跨专业选修" ]
              then
                echo "[点击查看跨专业选修课选课指南](https://hoa.moe/blog/selecting-cross-major-lessons/)" >> "${semester}-${category}.txt"
              fi
              echo "<!--more-->" >> "${semester}-${category}.txt"
              echo "{{< cards >}}" >> "${semester}-${category}.txt"
            fi
            
            echo -n "{{< card link=\"${line}\"" | tr [:upper:] [:lower:] >> "${semester}-${category}.txt"
            echo "title=\"$(cat "name_${line}.txt")\">}}" >> "${semester}-${category}.txt"

            echo '---' > "./content/docs/${semester}/${line}.md"
            echo "title: (${CATEGORY})$(cat "name_${line}.txt")" >> "./content/docs/${semester}/${line}.md"
            if [ ${CATEGORY} = "必修" ]
            then
              counter_man=$((${counter_man}+1));
              echo "weight: ${counter_man}" >> "./content/docs/${semester}/${line}.md"
            elif [ ${CATEGORY} = "限选" ]
            then
              counter_dis=$((${counter_dis}+1));
              echo "weight: ${counter_dis}" >> "./content/docs/${semester}/${line}.md"
            else
              counter_cross=$((${counter_cross}+1));
              echo "weight: ${counter_cross}" >> "./content/docs/${semester}/${line}.md"
            fi
            echo 'toc: true' >> "./content/docs/${semester}/${line}.md"
            echo "editURL: \"https://github.com/HITSZ-OpenAuto/${line}\"" >> "./content/docs/${semester}/${line}.md"
            echo '---' >> "./content/docs/${semester}/${line}.md"

            if [ ${CATEGORY} = "限选" ]
            then
              MODULE=`cat "tag_${line}.txt" | grep -E "^module:..*$" | sed -E 's/^module:.(.*)$/\1/'`
              echo "该课程属于限选课程的${MODULE}模块。" >> "./content/docs/${semester}/${line}.md"
              echo '<br>' >> "./content/docs/${semester}/${line}.md"
              echo "什么是${MODULE}模块？请查阅[限选课选课指南](https://hoa.moe/blog/selecting-distributive-lessons/)" >> "./content/docs/${semester}/${line}.md"
            fi
            
            curl "https://raw.githubusercontent.com/HITSZ-OpenAuto/${line}/main/README.md" -o "temp.md"
            tail -n +2 "temp.md" >> "./content/docs/${semester}/${line}.md"

            for _ in {1..3}; do
              echo '<br>' >> "./content/docs/${semester}/${line}.md"
            done

            echo >> "./content/docs/${semester}/${line}.md"
            echo >> "./content/docs/${semester}/${line}.md" && echo "## 资料下载" >> "./content/docs/${semester}/${line}.md"
            echo >> "./content/docs/${semester}/${line}.md"
            python scripts/gen_links.py HITSZ-OpenAuto ${line} xiln7 ${{ secrets.PERSONAL_TOKEN }}
            cat result.txt >> "./content/docs/${semester}/${line}.md"
            echo '<br>' >> "./content/docs/${semester}/${line}.md"

            echo >> "./content/docs/${semester}/${line}.md"
            echo >> "./content/docs/${semester}/${line}.md" && cat scripts/sponsor.txt >> "./content/docs/${semester}/${line}.md"
          done
      
      - name: Build Guide Pages
        run: |
          semester_arr=('fresh-autumn' 'fresh-spring' 'fresh-summer' 'sophomore-autumn' 'sophomore-spring' 'sophomore-summer' 'junior-autumn' 'junior-spring' 'junior-summer' 'senior-autumn' 'senior-spring')
          category_arr='mandatory distributional-selective cross-major-selective'
          for((i=0;i<${#semester_arr[@]};i++))
          do
            SEMESTER="${semester_arr[i]}"
            for CATEGORY in $category_arr
            do
              echo "$(cat "${SEMESTER}-${CATEGORY}.txt")" >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
              if test -s "${SEMESTER}-${CATEGORY}.txt"
              then
                echo "{{< /cards >}}" >> "./content/docs/${SEMESTER}/_index.zh-cn.md"
              fi
            done
          done

      - uses: EndBug/add-and-commit@v9
        with:
          add: 'content'
          default_author: github_actions

      - name: Auto Merge
        if: github.actor == 'github-actions[bot]'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          pull-request-number: ${{ github.event.pull_request.number }}
          merge-method: squash

      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify
            
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./public

      - name: Deploy to Cloudflare Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
            PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
            EXTERNAL_REPOSITORY: HITSZ-OpenAuto/hitsz-open-auto.github.io
            PUBLISH_BRANCH: cf-pages
            PUBLISH_DIR: ./public
            commit_message: ${{ github.event.head_commit.message }}
